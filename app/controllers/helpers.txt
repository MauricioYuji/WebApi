
var request = require('request');
var fs = require('fs');
var download = function (filename, time, callback) {


    setTimeout(function () {
        request({
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded',
                'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3',
                'Cache-Control': 'max-age=0',
                'Connection': 'keep-alive',
                'Host': 'api.qwant.com',
                'Upgrade-Insecure-Requests': ' 1',
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/74.0.3729.169 Safari/537.36'
            },
            uri: 'https://api.qwant.com/api/search/images?count=50&q=' + encodeURIComponent(filename+ " cover art") + '&t=images&locale=en_US&uiv=4&safesearch=1',
            method: 'GET'
        }, function (err, res, body) {
            //it works!
            var obj = JSON.parse(body);
            //console.log("obj: ", obj);
            if (obj != undefined && obj.data != undefined) {

                var url = obj.data.result.items.filter(f => parseInt(f.height) > parseInt(f.width))[0];
                if (url != undefined) {


                    var request = require('request').defaults({ encoding: null });

                    request.get(url.media, function (error, response, body) {
                        if (!error && response.statusCode == 200) {
                            data = "data:" + response.headers["content-type"] + ";base64," + new Buffer(body).toString('base64');
                            //console.log(data);

                            const image = new ImageModel({
                                name: filename,
                                img: data
                            });

                            // Save Note in the database
                            image.save()
                                .then(data => {
                                    res.send(data);
                                }).catch(err => {
                                    //res.status(500).send({
                                    //    message: err.message || "Some error occurred while creating the Note."
                                    //});
                                });
                        }
                    });

                    //request.head(url.media, function (err, res, body) {
                    //    request(url.media).pipe(fs.createWriteStream("images/" + filename)).on('close', callback);
                    //});
                    console.log("games[i].name: ", filename);
                    //console.log("url: ", url.media);
                    console.log("=====================");
                }
            }
        });


        //request.head(uri, function (err, res, body) {
        //    console.log('content-type:', res.headers['content-type']);
        //    console.log('content-length:', res.headers['content-length']);

        //    request(uri).pipe(fs.createWriteStream(filename)).on('close', callback);
        //});

    }, time);

};

exports.getImages = (req, res) => {

    var query = GameModel.find();
    query.sort({ name: 1 })
        .then(games => {
            GameModel.countDocuments({}, function (err, count) {
                console.log("Number of users:", count);
                var json = { "List": games, "Total": count };
                console.log("req: ", req.token);

                var time = 0;

                for (var i = 0; i < games.length; i++) {
                    let name = games[i].name.replace(/\//g, '');

                    var query = ImageModel.find({ "name": name });
                    query.sort({ name: 1 })
                        .then(img => {
                            if (img.length == 0) {
                                download(name, time, function () {
                                    //console.log('done');
                                    //console.log("games[i].name: ", games[i].name);
                                    //console.log("url: ", url);
                                    //console.log("=====================");
                                });
                                time += 1000;
                            }


                        }).catch(err => {
                            res.status(500).send({
                                message: err.message || "Some error occurred while retrieving notes."
                            });
                        });
                }
                res.send(json);
            });
        }).catch(err => {
            res.status(500).send({
                message: err.message || "Some error occurred while retrieving notes."
            });
        });
};